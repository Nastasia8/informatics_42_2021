#include <iostream>//стандартная библиотека основных операций
#include <algorithm>//стандартная библиотека языка, включающая набор функций для выполнения алгоритмических операций над контейнерами и над другими последовательностями.
#include <regex>//регулярные выражения
#include <cstdlib>//включает заголовок < stdlib. h стандартной библиотеки C > и добавляет связанные имена в std пространство имен. Включение этого заголовка гарантирует, что имена, объявленные с помощью внешней компоновки в заголовке стандартной библиотеки C, объявляются в std пространстве имен.
#include <limits>//определяет шаблон класса numeric_limits и два перечисления, касающиеся представления чисел с плавающей запятой и округления.
using namespace std;//облегчает ввод данных

class Student//создаем класс
{
private://тип private хранит основные данные класса, на которые не могут оказывать влияние другие классы в программном коде, но чтобы получить к ним доступ к private поля, необходимо описать специальный метод, по изменению приватного поля, из других классов private-элементы не доступны.

    string name;//создаем символьную переменную для ФИО студента
    int year;//создаем целочисленную переменную для года обучения
    int group;//создаем целочисленную переменную для номера группы
    int age;//создаем целочисленную переменную для возраста студента

    bool CheckName(string input)//выполняется проверка вводимых пользователем данных с помощью булевой функции
    {
        input = regex_replace(input, regex("^ +| +$|( ) +"), "$1");
        if (any_of(input.begin(), input.end(), ::isdigit) == 0 && count(input.cbegin(), input.cend(), ' ') == 2)//проверяется правильность ввода Фио
        {
            return 1;//функция принимает значение true
        }
        else //иначе
        {
            cout << "Incorrect name! Exemple: Petrov Ivan Sergeevich" << endl;//Неверно введенное имя. Пример: Петров Иван Сергеевич
            cout << "" << endl;//отступы
            return 0;//функция принимает значение false
        }
    }

    bool CheckYear(string check)//выполняется проверка вводимых пользователем данных с помощью булевой функции
    {
        try//начало блока исключений
        {
            stoi(check);
            if (stoi(check) <= 0 || stoi(check) > 5)//функция будет принимать значение false если вводимый пользователем год обучения будет меньше или равен 0 и если он будет больше 5 т.к. это невозможно
            {
                cout << "Enter correct year of study from 1 to 4!" << endl;//если вводимые пользователем данные не удовлетворяют условиям, то выводится фраза: "Введите верный год обучения. От 1 до 4-х"
                cout << "" << endl;//отступы
                return 0;//функция принимает значение false
            }
            else//иначе
            {
                return 1;//функция принимает значение true
            }

        }
        catch (const exception& e)//ловим исключения, которые не определяются нашими условиями
        {
            cout << "Enter correct year of study from 1 to 4!" << endl;//если вводимые пользователем данные не удовлетворяют условиям, то выводится фраза:"Введите верный год обучения. От 1 до 4-х"
            cout << "" << endl;//отступы
            return 0;//функция принимает значение false
        }
    }

    bool CheckGroup(string check)//выполняется проверка вводимых пользователем данных с помощью булевой функции
    {
        try//начало блока исключений
        {
            stoi(check);
            if (stoi(check) <= 0)//функция будет принимать значение false если вводимый пользователем номер группы будет меньше или равен 0  т.к. это невозможно
            {
                cout << "Enter correct number of student's group!" << endl;//если вводимые пользователем данные не удовлетворяют условиям, то выводится фраза:"Введите верный номер группы"
                cout << "" << endl;//отступы
                return 0;//функция принимает значение false
            }
            else//иначе
            {
                return 1;//функция принимает значение true
            }

        }
        catch (const exception& e)//ловим исключения, которые не определяются нашими условиями
        {
            cout << "Enter correct number of student's group!" << endl;//Введите верный номер группы
            cout << "" << endl;//отступы
            return 0;//функция принимает значение false
        }
    }

    bool CheckAge(string check)//выполняется проверка вводимых пользователем данных с помощью булевой функции
    {
        try//начало блока исключений
        {
            stoi(check);
            if (stoi(check) <= 0)//условие о том, что возраст не может быть меньше или равен 0
            {
                cout << "Enter correct student's age!" << endl;//если вводимые пользователем данные не удовлетворяют условиям, то выводится фраза:"Введите правильный возраст"
                cout << "" << endl;//отступы
                return 0;//функция принимает значение false
            }
            else//иначе
            {
                return 1;//функция принимает значение true
            }

        }
        catch (const exception& e)//ловим исключения, которые не определяются нашими условиями
        {
            cout << "Enter correct student's age!" << endl;//если вводимые пользователем данные не удовлетворяют условиям, то выводится фраза:"Введите правильный возраст"
            cout << "" << endl;//отступы
            return 0;//функция принимает значение false
        }
    }

public://публичный, общедоступный класс
    void Update();//переменная для данных студентов
    void Show();//переменная для шаблонной фразы
};
void Student::Update() //Бинарный оператор::уточняет область видимости в которой находится имя. Student - область видимости, Update() - уточняемое имя
{

    cout << "Enter full name of student: ";//введите ФИО
    string buffer;//создается дополнительная переменная для ФИО
    getline(cin, buffer);//функция извлекает данные из входного потока до строкового разделителя, который не записывается в получившийся массив данных
    while (!CheckName(buffer))//пока идет проверка
    {
        _flushall();//возвращает число открытых потоков (входных и выходных)
        cout << "Enter full name of student: ";//введите ФИО
        getline(cin, buffer);//функция извлекает данные из входного потока до строкового разделителя, который не записывается в получившийся массив данных
    }
    name = buffer;//после проверки 
    cout << "" << endl;//отступы

    cout << "Enter student's year of study: ";//введите год обучения
    string input_year;//дополнительная переменная для года обучения
    cin >> input_year;//вводится год обучения
    while (!CheckYear(input_year))//пока проверяется год обучения
    {
        _flushall();//возвращает число открытых потоков 
        cout << "Enter student's year of study: ";//введите год обучения
        cin >> input_year;//вводится год обучения
    }
    year = stoi(input_year);//после проверки
    cout << "" << endl;//отступы

    cout << "Enter student's group: ";//введите номер группы
    string input_group;//дополнительная переменная для номера группы
    cin >> input_group;//вводится номер группы
    while (!CheckGroup(input_group))//пока идет проверка номера группы
    {
        _flushall();//возвращает число открытых потоков
        cout << "Enter student's group: ";//введите номер группы
        cin >> input_group;//вводится номер группы
    }
    group = stoi(input_group);//после проверки
    cout << "" << endl;//отступы

    cout << "Enter student's age: ";//введите возраст студента
    string input_age;//временная переменная для возраста 
    cin >> input_age;//вводится возраст студента
    while (!CheckAge(input_age))//пока идет проверка возраста
    {
        _flushall();//возвращает число открытых потоков 
        cout << "Enter student's age: ";//введите возраст студента
        cin >> input_age;//вводится возраст студента
    }
    age = stoi(input_age);//после проверки
    cout << "" << endl;//отступы
    _flushall();//возвращает число открытых потоков 
}
void Student::Show()//Бинарный оператор::уточняет область видимости в которой находится имя. Student - область видимости, Show() - уточняемое имя
{
    cout << name << " " << year << " year student of group number " << group << " is " << age << " age old" << endl;//создается шаблон вывода информации по каждому студенту 
}

int main(int argc, char* argv[])//аргумент argc типа integer содержит в себе количество аргументов командной строки. Аргумент argv типа char - указатель на массив строк, каждый элемент массива указывает на аргументы командной строки
{
    Student firts;//данные 1 студента
    Student second;//данные 2 студента
    Student third;//данные 3 студента

    cout << "First student: " << endl;//Первый студент:
    firts.Update();//собираются данные по 1 студенту
    cout << "" << endl;//отступы
    cout << "Second student: " << endl;//Второй студент:
    second.Update();//собираются данные по 2 студенту
    cout << "" << endl;//отступы
    cout << "Third student: " << endl;//Третий студент:
    third.Update();//собираются данные по 3 студенту
    cout << "" << endl;//отступы

    cout << "In the list of students for expulsion: " << endl;//выводится фраза: "В списке на отчисление:"
    firts.Show();//выводим данные 1 студента на экран
    second.Show();//выводим данные 2 студента на экран
    third.Show();//выводим данные 3 студента на экран

    return 0;//ф-я завершается
