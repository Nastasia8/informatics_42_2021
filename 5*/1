#include <iostream>//стандартная библиотека основных операций
#include <iomanip>//библиотека, в которой содержится модификатор setw. С его помощью можно, например, установить ширину поля для каждой координаты вектора, или элемента матрицы
#include <cmath>//библиотека, в которой содержатся функции, предназначенные для выполнения простейших математических операций

float locate(float start, float end, float step);//функция строит 1 таблицу значений
void finde(float start, float end, const float accuracy);//функция строит 2 таблицу значений
double function(float input);//функция, содержащая в себе уравнение

int main(int argc, char const* argv[])//аргумент argc типа integer содержит в себе количество аргументов командной строки. Аргумент argv типа char - указатель на массив строк, каждый элемент массива указывает на аргументы командной строки
{
    //тип данных float служит для хранения чисел с плавающей запятой
    float start = 0;//переменная, хранящая в себе исходное значение
    float end = 10;//переменная, хранящая в себе конечное значение 
    float step = 0.2;//переменная, содержащая в себе шаг
    const float accuracy = 0.0001;//константа ε, обозначающая заданную точность в 0.0001
    float change = locate(start, end, step);//переменная, содержащая в себе информацию, об изменениях 
    finde(change - step, change, accuracy);////функция строит 2 таблицу значений
    return 0;
}

double function(float input) //функция, содержащая в себе уравнение
{
    return pow(exp(1), -input) - 2 * sqrt(input);//уравнение
}

float locate(float start, float end, float step) //функция строит 1 таблицу значений 
{
    //тип данных double предоставляет самые большие и наименьшие возможные величины числа, по умолчанию равен 0
    double ans1, ans2;//переменные корней уравнения 
    ans1 = function(start);//переменная принимает начальное значение функции
    std::cout << "x" << "\t" << "y" << std::endl;//на экран выводятся буквы x и y как часть таблицы их значений
    std::cout << start << "\t" << ans1 << std::endl;//на экран выводится таблица значений x и у соответствующие решению уравнения
    int count = 0;//создается переменная-счетчик для того, что бы понять, сколько операций будет проведено
    for (float i = start + step; i <= end; i += step) 
    {
        ans2 = function(i);//значение y
        std::cout << i << "\t" << ans2 << std::endl;
        count++;//переменная счетчик увеличивается на 1
        if (ans1 * ans2 < 0) 
        {
            std::cout << "Root of equation located by " << count << " iterations" << std::endl;//выводится фраза "Корень уравнения был найден после 1 шага"
            return i;
        }
        ans1 = ans2;
    }
    return 0;
}

void finde(float start, float end, const float accuracy) //функция строит 2 таблицу значений 
{
    float half;//создается переменная, для столбца "c"
    double fa, fc, fproduct;//создается переменная для столбцов "f(a)","f(b)","f(a)*f(c)"
    int count = 1;//создается переменная-счетчик для того, что бы понять, сколько операций будет проведено
    std::cout << "Iteration "// заголовок столбца "шаги" 
        //функция setw используется для установки количества символов, которые будут использоваться в качестве ширины поля для следующей операции вставки
        << std::setw(10) << "a"//заголовкок столбца "a"(10, т.к. 1й столбец выводится отдельно без отступа)
        << std::setw(15) << "b"//заголовкок столбца "b"
        << std::setw(15) << "c"//заголовкок столбца "c"
        << std::setw(15) << "|a-b|"//заголовкок столбца "|a-b|"
        << std::setw(15) << "f(a)"//заголовкок столбца "f(a)"
        << std::setw(15) << "f(c)"//заголовкок столбца "f(c)"
        << std::setw(15) << "f(a)*f(c)"//заголовкок столбца "f(a)*f(c)"
        << std::endl;
    //функция fabs() позволяет вычислить абсолютное значение по модулю x и возвращает значение типа double
    while (fabs(start - end) >= accuracy) //длина отрезка проверяется на соответствие константе ε
    {
        half = (start + end) / 2;//середина отрезка
        fa = function(start);//результат выполнения функции по начальному значению, функция "f(a)"
        fc = function(half);//результат выполнения функции по срединному значению, функция "f(c)"
        fproduct = fa * fc;//результат выполнения функции "f(a)*f(c)"
        std::cout << std::setw(5) << count//столбец "шаги", нумерует каждую строчку
            << std::setw(15) << start//выводит значение столбца "a"
            << std::setw(15) << end//выводит значение столбца "b"
            << std::setw(15) << half//выводит значение столбца "c"
            << std::setw(15) << fabs(start - end)// выводит значение столбца "|a-b|"
            << std::setw(15) << fa// выводит значение столбца "f(a)"
            << std::setw(15) << fc// выводит значение столбца "f(с)"
            << std::setw(15) << fproduct// выводит значение столбца "f(a)*f(c)"
            << std::endl;//отступ
        if (fproduct < 0) //2 этап, 4 пункт задания заменить значения при определенных условиях 
        {
            end = half;//новый конец отрезка
        }
        else 
        {
            start = half;//новое начало отрезка
        }
        count++;//переменная счетчик увеличивается на 1
    }
    half = (start + end) / 2;//новая середина отрезка
    fa = function(start);//новый результат выполнения функции по начальному значению, функция "f(a)"
    fc = function(half);//новый результат выполнения функции по срединному значению, функция "f(c)"
    fproduct = fa * fc;//новый результат выполнения функции "f(a)*f(c)"
    std::cout << std::setw(5) << count//столбец "шаги", нумерует каждую строчку 
        << std::setw(15) << start//выводит значение столбца "a"
        << std::setw(15) << end//выводит значение столбца "b"
        << std::setw(15) << half //выводит значение столбца "c"
        << std::setw(15) << fabs(start - end)// выводит значение столбца "|a-b|"
        << std::setw(15) << fa// выводит значение столбца "f(a)"
        << std::setw(15) << fc// выводит значение столбца "f(с)"
        << std::setw(15) << fproduct// выводит значение столбца "f(a)*f(c)"
        << std::endl;//отступ
    std::cout << "Root of equation is " << (start + end) / 2 << " and was received by " << count << " iterations" << std::endl;//выводится фраза "Корень уравнения был найден после 12 шагов"


}
